///Обычные функции возвращают только одно-единственное значение (или ничего).
///Генераторы могут порождать (yield) множество значений одно за другим, по мере необходимости.
///Генераторы отлично работают с перебираемыми объектами и позволяют легко создавать потоки данных.

//function* strGenerator(){
//    yield 'H'
//    yield 'e'
//    yield 'l'
//    yield 'l'
//    yield 'o'
//}

//const str = strGenerator()

//function * numberGen(n=10) {
//    for (let i=0; i<n; i ++) {
//        yield i
//    }
//}

//const num = numberGen(7)

//const iterator = {
//    [Symbol.iterator](n = 10) {
//     let i=0//       return{
//    next (){
//        if  (i<n) {
//                 return {value: ++i, done:false}
//}
//             return {value: undefined, done: true}
//         }
//        }
//    }
//}

///Тип данных Symbol
// По спецификации, в качестве ключей для свойств объекта могут использоваться только строки или символы.
// Ни числа, ни логические значения не подходят, разрешены только эти два типа данных.
// До сих пор мы видели только строки. Теперь давайте разберём символы, увидим, что хорошего они нам дают.
// «Символ» представляет собой уникальный идентификатор.
function* iter(n = 10) {
        for (let i = 0; i < n; i++) {
            yield i
    }
}
    for (let k of iter(6)) {
     console.log (k)
}